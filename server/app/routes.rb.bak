begin
	require_relative '../../.env.rb'
rescue LoadError => e
	puts e.message
end

require 'bundler'
Bundler.require(:default, ENV['RACK_ENV'].to_sym)

%w(
    defaults
    models
).each { |lib| require_relative lib }

class App < Roda
    plugin :render
    plugin :json

    route do |r|
        body = request.body.read
		request.body.rewind
		data = JSON.parse(body) rescue {} 
        data = indifferent_data(data)

        r.root do
            puts 'Hello World'
        end

        r.post "register" do
            ret = User.register data
            {
                values: ret,
                success: true
            }
        end

        r.post "login" do
            ret = User.login data
            {
                values: ret,
                success: true
            }
        end

        r.on "user" do
            r.on "post" do
                r.post "create" do
                    ret = Post.create_post data
                    {
                        values: ret,
                        success: true
                    }
                end
    
                r.on Integer do |user_id|
                    user = Post[post_id.to_i]
                    raise 'Invalid User' if !user

                    r.get do
                        ret = user.get_user_post 
                        {
                            values: ret,
                            success: true
                        }
                    end
                    
                    r.post do
                        ret = post.update_post data
    
                        {
                            values: ret,
                            success: true
                        }
                    end

                    r.delete do
                        post.delete_post
                        {
                            success: true
                        }
                    end
                end
            end
        end

        r.on "post" do
            r.get "all" do
                ret = Post.get_all_posts
                {
                    values: ret,
                    success: true
                }
            end

            r.on Integer do |post_id|
                post = Post[post_id.to_i]
                raise 'Invalid Post' if !post

                r.get do
                    ret = post.get_post 
                    {
                        values: ret,
                        success: true
                    }
                end
            end

            r.on "comment" do
                id = data[:post_id] || data[:post_id] || nil
                raise "No id." if id.nil?
        
                @post = Post.find(id: id)
                raise "Create Post First" if !@post
        
                r.get do
                    ret = @post.get_all_comments
                    {
                        values: ret,
                        success: true
                    }
                end
        
                r.post "create" do
                    ret = @post.create_comment data
        
                    {
                        values: ret,
                        success: true
                    }
                end
            end
        end
    end
end